/*******************************************************************************
* File Name: cyhal_clock_impl.h
*
* Description:
* CAT4 specific implementation for clocks API.
*
********************************************************************************
* \copyright
* Copyright 2021-2022 Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#pragma once

#include "cyhal_hw_resources.h"

#if defined(__cplusplus)
extern "C"
{
#endif

/**
 * \addtogroup group_hal_impl_clock Clocks
 * \ingroup group_hal_impl
 * \{
 * Implementation specific interface for using the Clock driver. These items, while usable
 * within the HAL, are <b>not</b> necessarily portable between devices. The diagram below
 * shows how the clocks relate to each other. This is a superset of what is available. See
 * the device specific Data Sheet for the exact set of clocks that are available on a
 * specific device.
 *
 * \image html 4390x_clock_tree.png
 *
 * \section section_clock_snippets_impl Code snippets
 * \note Error handling code has been intentionally left out of snippets to highlight API usage.
 *
 * \subsection subsection_clock_snippet_5_impl Snippet: System initialization
 * The system clocks are initialized in the cybsp_init() function.
 */

/** Active Low Power (ALP): Supplied by an internal or external oscillator. This clock is requested by cores when
 * accessing backplane registers in other cores or when performing minor computations. When an external
 * crystal is used to provide reference clock, ALP clock frequency is determined by the frequency of the
 * external oscillator. A 37.4 MHz reference clock is recommended. */
extern const cyhal_clock_t CYHAL_CLOCK_ALP;
/** Active Low Power (ALP): Supplied by an internal or external oscillator. This clock is requested by cores when
 * accessing backplane registers in other cores or when performing minor computations. When an external
 * crystal is used to provide reference clock, ALP clock frequency is determined by the frequency of the
 * external oscillator. A 37.4 MHz reference clock is recommended. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_ALP;

/** High Throughput (HT): Supplied by an on-chip PLL. This clock is requested by cores when they transfer blocks
 * of data to or from memory, perform computation-intensive operations, or need to meet the requirements of
 * external devices. Cores that cannot tolerate operations at less than the High Throughput (HT) clock frequency,
 * such as the memory controller, may assert the HT clock request continuously. */
extern const cyhal_clock_t CYHAL_CLOCK_HT;
/** High Throughput (HT): Supplied by an on-chip PLL. This clock is requested by cores when they transfer blocks
 * of data to or from memory, perform computation-intensive operations, or need to meet the requirements of
 * external devices. Cores that cannot tolerate operations at less than the High Throughput (HT) clock frequency,
 * such as the memory controller, may assert the HT clock request continuously. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_HT;

/** Idle Low Power (ILP): Generated by either an internal or external low-power oscillator (LPO)
 * or by dividing the ALP clock frequency by a programmable value.
 * Use of this clock maximizes power savings during idle states. */
extern const cyhal_clock_t CYHAL_CLOCK_ILP;
/** Idle Low Power (ILP): Generated by either an internal or external low-power oscillator (LPO)
 * or by dividing the ALP clock frequency by a programmable value.
 * Use of this clock maximizes power savings during idle states. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_ILP;

/** Low Power Oscillator (LPO): Internal/external 32 kHz clock source for low-power mode. */
extern const cyhal_clock_t CYHAL_CLOCK_LPO;
/** Low Power Oscillator (LPO): Internal/external 32 kHz clock source for low-power mode. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_LPO;

/** WLAN ACRADIO Crystal (XTAL): External 37.4 MHz clock source for active mode. */
extern const cyhal_clock_t CYHAL_CLOCK_XTAL;
/** WLAN ACRADIO Crystal (XTAL): External 37.4 MHz clock source for active mode. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_XTAL;

/** Baseband phase-Locked Loop (BB PLL): The baseband PLL provides digital clocks to the HT, Backplane and the
 * digital cores (including WLAN domain). Nominal frequency is 960.1 MHz clock. */
extern const cyhal_clock_t CYHAL_CLOCK_BB_PLL;
/** Baseband phase-Locked Loop (BB PLL): The baseband PLL provides digital clocks to the HT, Backplane and the
 * digital cores (including WLAN domain). Nominal frequency is 960.1 MHz clock. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_BB_PLL;

/** Audio phase-Locked Loop (AUDIO PLL): The Audio PLL provides MCLK for I2S interfaces and audio timer clocks
 * for ASCU. Note that this clock is currently not supported. */
extern const cyhal_clock_t CYHAL_CLOCK_AUDIO_PLL;
/** Audio phase-Locked Loop (AUDIO PLL): The Audio PLL provides MCLK for I2S interfaces and audio timer clocks
 * for ASCU. Note that this clock is currently not supported. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_AUDIO_PLL;

/** USB phase-Locked Loop (USB PLL): The USB PLL provides clocks for the USB.
 * Note that this clock is currently not supported. */
extern const cyhal_clock_t CYHAL_CLOCK_USB_PLL;
/** USB phase-Locked Loop (USB PLL): The USB PLL provides clocks for the USB.
 * Note that this clock is currently not supported. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_USB_PLL;

/** HSIC phase-Locked Loop (PLL): The HSIC PLL provides clocks for the HSIC.
 * Note that this clock is currently not supported. */
extern const cyhal_clock_t CYHAL_CLOCK_HSIC_PLL;
/** HSIC phase-Locked Loop (PLL): The HSIC PLL provides clocks for the HSIC.
 * Note that this clock is currently not supported. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_HSIC_PLL;

/** WLAN phase-Locked Loop (WLAN PLL): The WLAN radio PLL provides the RF LO, plus ADC and DAC clocks.
 * Note that this clock is currently not supported. */
extern const cyhal_clock_t CYHAL_CLOCK_WLAN_PLL;
/** WLAN phase-Locked Loop (WLAN PLL): The WLAN radio PLL provides the RF LO, plus ADC and DAC clocks.
 * Note that this clock is currently not supported. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_WLAN_PLL;

/** CPU : Clock for the apps ARM CR4 core. It can be sourced either by ARM(own path from HT) or Backplane clock.
 * If using 320 MHz or 480 MHz, the clock source will be ARM (own path from HT). Otherwise the Backplane clock
 * is used. Modifying the CPU frequency will also change the backplane frequency and hence it will also affect
 * peripherals that run off of the backplane clock. The backplane clock frequency is the same as the CPU
 * frequency. If running at 320 MHz or 480 MHz, the backplane frequency is 160 MHz. */
extern const cyhal_clock_t CYHAL_CLOCK_CPU;
/** CPU : Clock for the apps ARM CR4 core. It can be sourced either by ARM(own path from HT) or Backplane clock.
 * If using 320 MHz or 480 MHz, the clock source will be ARM (own path from HT). Otherwise the Backplane clock
 * is used. Modifying the CPU frequency will also change the backplane frequency and hence it will also affect
 * peripherals that run off of the backplane clock. The backplane clock frequency is the same as the CPU
 * frequency. If running at 320 MHz or 480 MHz, the backplane frequency is 160 MHz. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_CPU;

/** Backplane : Provides the clock for peripherals and CPU. It is sourced from HT. Active domain
 * peripherals that do not have dedicated PLLs are either clocked directly from ALP or from the backplane.
 * Thus it is a shared resource and care must be taken when changing this clock.
 * Modifying the backplane frequency also affects the CPU. The backplane frequency is upper bound at 160 MHz */
extern const cyhal_clock_t CYHAL_CLOCK_BACKPLANE;
/** Backplane : Provides the clock for peripherals and CPU. It is sourced from HT. Active domain
 * peripherals that do not have dedicated PLLs are either clocked directly from ALP or from the backplane.
 * Thus it is a shared resource and care must be taken when changing this clock.
 * Modifying the backplane frequency also affects the CPU. The backplane frequency is upper bound at 160 MHz */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_BACKPLANE;

/** Fast UART : Dedicated clock source for fast uart. Derived from BB_PLL and fixed at 160 MHz. */
extern const cyhal_clock_t CYHAL_CLOCK_FAST_UART;
/** Fast UART : Dedicated clock source for fast uart. Derived from BB_PLL and fixed at 160 MHz. */
extern const cyhal_resource_inst_t CYHAL_CLOCK_RSC_FAST_UART;

/** \cond INTERNAL */
/** Performs a one time initialization of all system clocks. This should be done as part of initial
 * device startup.
 *
 * @return CY_RSLT_SUCCESS if the system clocks were properly initialized.
 */
cy_rslt_t _cyhal_clock_system_init(void);
/** \endcond */

/** \} group_hal_impl_clock */

#if defined(__cplusplus)
}
#endif
